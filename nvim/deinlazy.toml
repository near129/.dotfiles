[[plugins]]
repo = 'Shougo/neosnippet.vim'
on_event = 'InsertCharPre'
on_ft = 'snippet'
depends = ['neosnippet-snippets', 'context_filetype']
hook_source = '''
  imap <C-k>     <Plug>(neosnippet_jump_or_expand)
  smap <C-k>     <Plug>(neosnippet_jump_or_expand)
  xmap <C-k>     <Plug>(neosnippet_expand_target)
  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#enable_completed_snippet = 1
  " let g:neosnippet#enable_complete_done = 1
  let g:neosnippet#expand_word_boundary = 1
  let g:neosnippet#snippets_directory = '~/.config/nvim/snippets'
  " SuperTab like snippets behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
" インデントをうまく反映させる
au BufNewFile, BufRead *.snip set noexpandtab
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_source = 'source ~/.config/nvim/denite.rc.vim'
hook_add = '''
  nnoremap <silent> <Space><Space>
        \ :<C-u>Denite 
  nnoremap <silent> <Space>b
        \ :<C-u>Denite buffer<CR>
  nnoremap <silent> <Space>f
        \ :<C-u>Denite file/rec:
  nnoremap <silent> <Space>g
        \ :<C-u>Denite grep:
  nnoremap <silent> <Space>m
        \ :<C-u>Denite menu<CR>
  nnoremap <silent> <Space>p
        \ :<C-u>Denite problem_file<CR>
  nnoremap <silent> ;r
        \ :<C-u>Denite -buffer-name=register
        \ register neoyank<CR>
  xnoremap <silent> ;r
        \ :<C-u>Denite -default-action=replace -buffer-name=register
        \ register neoyank<CR>
  nnoremap <silent> [Window]<Space>
  \ :<C-u>Denite file/rec:~/.vim/rc<CR>
  nnoremap <silent><expr> / wordcount().chars > 30000 ?
  \ ":\<C-u>Denite -buffer-name=search -start-filter
  \  -search line/external\<CR>" :
  \ ":\<C-u>Denite -buffer-name=search -start-filter -search line\<CR>"
  nnoremap <silent><expr> * wordcount().chars > 30000 ?
  \ ":\<C-u>DeniteCursorWord -buffer-name=search -search line/external\<CR>" :
  \ ":\<C-u>DeniteCursorWord -buffer-name=search -search line\<CR>"
  xnoremap <silent> *
  \ "qy:Denite -input=`@q` -buffer-name=search -search line<CR>
  nnoremap <silent><expr> [Window]s finddir('.git', ';') != '' ?
  \ ":\<C-u>Denite -sorters=sorter/rank -unique
  \  file/point file/old file/dirty file/git file file:new\<CR>" :
  \ ":\<C-u>Denite -sorters=sorter/rank -unique
  \  file/point file/old file file:new\<CR>"
  nnoremap <silent> n
  \ :<C-u>Denite -buffer-name=search -resume<CR>
  nnoremap <silent><expr> tt  &filetype == 'help' ?  "g\<C-]>" :
  \ ":\<C-u>DeniteCursorWord -buffer-name=tag -immediately tag:include\<CR>"
  nnoremap <silent><expr> tp  &filetype == 'help' ?
  \ ":\<C-u>pop\<CR>" : ":\<C-u>Denite jump\<CR>"
  nnoremap <silent> [Window]n :<C-u>Denite dein<CR>
  nnoremap <silent> [Window]g :<C-u>Denite ghq -default-action=cd<CR>
  nnoremap <silent> ;g :<C-u>Denite -buffer-name=search
  \ -no-empty grep<CR>
  nnoremap <silent> ft :<C-u>Denite filetype<CR>
  nnoremap <silent> <C-t> :<C-u>Denite -buffer-name=deol -split=floating
  \ -cursor-pos=`tabpagenr()-1` deol:zsh<CR>
  nnoremap <silent> <C-k> :<C-u>Denite change jump<CR>
  nnoremap <silent> <C-h> :<C-u>DeniteCursorWord help<CR>
  nnoremap <silent> cf
  \ :<C-u>Denite command_history<CR>
'''

[plugins.ftplugin]
denite = '''
  " Define mappings
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> a
  \ denite#do_map('choose_action')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> e
  \ denite#do_map('do_action', 'edit')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> N
  \ denite#do_map('do_action', 'new')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> '
  \ denite#do_map('quick_move')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
  nnoremap <silent><buffer><expr> r
  \ denite#do_map('do_action', 'quickfix')
  nnoremap <silent><buffer><expr> <C-r>
  \ denite#do_map('restore_sources')
  nnoremap <silent><buffer><expr> <C-l>
  \ denite#do_map('redraw')
'''

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_event = 'TextYankPost'
on_source = ['denite.nvim']

[[plugins]]
repo = 'zchee/deoplete-zsh'
on_ft = ['zsh', 'sh']

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_event = 'InsertEnter'
hook_source = '''
let g:deoplete#enable_at_startup = 1
let g:deoplete#sources#jedi#python_path = '/Users/ryotaro/.pyenv/shims/python'

setlocal dictionary+=/usr/share/dict/words

inoremap <expr><C-h> deoplete#smart_close_popup()."<C-h>"
inoremap <expr><BS> deoplete#smart_close_popup()."<C-h>"
inoremap <expr><tab> pumvisible() ? "\<C-n>" :
    \ neosnippet#expandable_or_jumpable() ?
    \    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"

call deoplete#custom#option({
    \ 'auto_complete': v:true,
    \ 'min_pattern_length': 1,
    \ 'auto_complete_delay': 0,
    \ 'auto_refresh_delay': 1,
    \ 'refresh_always': v:true,
    \ 'smart_case': v:true,
    \ 'camel_case': v:false,
    \ 'max_list': 10,
    \ })
call deoplete#custom#source('tabnine', 'rank', 1)
"call deoplete#custom#source('dictionary', 'min_pattern_length', 4)
call deoplete#custom#option('sources', {
\ 'python': ['neosnippet', 'jedi', 'tabnine',  'dictionary', 'file'],
\ 'vim': ['vim', 'buffer', 'dictionary', 'file'],
\ 'tex': ['omni', 'file', 'buffer', 'dictionary', 'tabnine'],
\ '_': ['tabnine', 'file', 'dictionary'],
\})
" 一つ目の候補を選択状態にする
"set completeopt+=noinsert
" previw windowを消す(関数などの説明が書かれているウィンドウが出る)
set completeopt-=preview
call deoplete#enable()
'''

[[plugins]]
repo = 'deoplete-plugins/deoplete-jedi'
on_ft = 'python'

[[plugins]]
repo = 'deoplete-plugins/deoplete-dictionary'
on_event = 'InsertEnter'

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = 'python'

[[plugins]]
repo = 'raghur/fruzzy'
on_source = ['denite.nvim']
hook_source = '''
let g:fruzzy#sortonempty = 0
let g:fruzzy#use_native = 1
'''
hook_post_update = 'call fruzzy#install()'

[[plugins]]
repo = 'lervag/vimtex'
on_ft = 'tex'
hook_post_source = '''
call deoplete#custom#var('omni', 'input_patterns', {
    \ 'tex' : g:vimtex#re#deoplete
    \})
'''
